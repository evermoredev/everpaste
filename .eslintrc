{
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "ecmaFeatures": {
    "jsx": true,
    "modules": true
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "globals": {
    "process.env.BROWSER": true,
    "process.env.NODE": true,
    "__INITIAL_STATE__": true,
    "__IS_DEVELOPMENT__": true,
    "__IS_CLIENT__": true,
    "__IS_SERVER__": true,
    "global": true
  },
  "plugins": [
    "react"
  ],
  "parser": "babel-eslint",
  "rules": {

    /**
     * Recommended to show as errors
     * "off" or 0 - turn the rule off
     * "warn" or 1 - turn the rule on as a warning (doesn’t affect exit code)
     * "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)
     */

    // disallow assignment operators in conditional statements
    // http://eslint.org/docs/rules/no-cond-assign
    "no-cond-assign": ["error", "always"],

    // disallow the use of console
    // http://eslint.org/docs/rules/no-console
    "no-console": ["error", {"allow": ["warn", "error", "log"]}],

    // disallow constant expressions in conditions
    "no-constant-condition": ["error"],

    // disallow control characters in regular expressions
    "no-control-regex": ["error"],

    // disallow the use of debugger
    "no-debugger": ["error"],

    // disallow duplicate arguments in function definitions
    "no-dupe-args": ["error"],

    // disallow duplicate keys in object literals
    "no-dupe-keys": ["error"],


    "no-duplicate-case": ["error"], // disallow duplicate case labels


    "no-empty": ["error"], // disallow empty block statements


    "no-empty-character-class": ["error"], // disallow empty character classes in regular expressions


    "no-ex-assign": ["error"], // disallow reassigning exceptions in catch clauses


    "no-extra-boolean-cast": ["error"], // disallow unnecessary boolean casts


    "no-extra-parens": ["off"], // disallow unnecessary parentheses


    "no-extra-semi": ["error"], // disallow unnecessary semicolons


    "no-func-assign": ["error"], // disallow reassigning function declarations


    "no-inner-declarations": ["error"], // disallow function or var declarations in nested blocks


    "no-invalid-regexp": ["error"], // disallow invalid regular expression strings in RegExp constructors


    "no-irregular-whitespace": ["error"], // disallow irregular whitespace outside of strings and comments


    "no-negated-in-lhs": ["error"], // disallow negating the left operand in in expressions


    "no-obj-calls": ["error"], // disallow calling global object properties as functions


    "no-prototype-builtins": ["error"], // Disallow use of Object.prototypes builtins directly


    "no-regex-spaces": ["error"], // disallow multiple spaces in regular expression literals


    "no-sparse-arrays": ["error"], // disallow sparse arrays


    "no-unexpected-multiline": ["error"], // disallow confusing multiline expressions


    "no-unreachable": ["error"], // disallow unreachable code after return


    "no-unsafe-finally": ["error"], // disallow control flow statements in finally blocks


    "use-isnan": ["error"], // require calls to isNaN() when checking for NaN


    "valid-jsdoc": ["off"], // enforce valid JSDoc comments


    "valid-typeof": ["error"], // enforce comparing typeof expressions against valid strings


    "no-implied-eval": ["error"], // disallow the use of eval()-like methods

    /**
     * Best Practices
     */
    "accessor-pairs": ["off"], //enforces getter/setter pairs in objects (off by default)
    "array-callback-return": ["warn"], // enforce return statements in callbacks of array methods
    "block-scoped-var": ["warn"],  // These rules relate to better ways of doing things to help you avoid problems
    "complexity": ["off"], // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": ["off"], // require return statements to either always or never specify values
    "curly": ["warn", "all"], // enforce consistent brace style for all control statements
    "default-case": ["warn"], // require default cases in switch statements
    "dot-location": ["warn", "property"],  // enforces consistent newlines before or after dots (off by default)
    "dot-notation": ["warn"], // enforce dot notation whenever possible
    "eqeqeq": ["warn", "always"], // require the use of === and !== strict equalities
    "guard-for-in": ["off"], // make sure for-in loops have an if statement (off by default)
    "no-alert": ["warn"], // disallow the use of alert, confirm, and prompt
    "no-caller": ["warn"], // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": ["error"], // disallow lexical declarations in case clauses
    "no-div-regex": ["off"], // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": ["off"], // disallow else blocks after return statements in if statements
    "no-empty-function": ["warn"], // disallow empty functions
    "no-empty-pattern": ["error"], // disallow empty destructuring patterns
    "no-eq-null": ["error"], // disallow null comparisons without type-checking operators
    "no-eval": ["error"], // disallow the use of eval()
    "no-extend-native": ["error", { "exceptions": ["Object"] }], // disallow extending native types
    "no-extra-bind": ["error"], // disallow unnecessary calls to .bind()
    "no-extra-label": ["error"], // disallow unnecessary labels
    "no-fallthrough": ["error"], // disallow fallthrough of case statements
    "no-floating-decimal": ["warn"], // disallow leading or trailing decimal points in numeric literals
    "no-implicit-coercion": ["off"], // disallow shorthand type conversions
    "no-implicit-globals": ["error"], // disallow var and named function declarations in the global scope
    "no-invalid-this": ["off"], // disallow this keywords outside of classes or class-like objects
    "no-iterator": ["error"], // disallow the use of the __iterator__ property
    "no-labels": ["error"], // disallow unused labels
    "no-lone-blocks": ["error"], // disallow unnecessary nested blocks
    "no-loop-func": ["error"], // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": ["error", {"ignore": [1, 0, -1], "ignoreArrayIndexes": true}], // disallow magic numbers
    "no-multi-spaces": ["error"], // disallow multiple spaces
    "no-multi-str": ["warn"], // disallow multiline strings
    "no-native-reassign": ["warn"], // disallow assignments to native objects or read-only global variables
    "no-new": ["warn"], // disallow new operators outside of assignments or comparisons
    "no-new-func": ["error"], // disallow new operators with the Function object
    "no-new-wrappers": ["warn"], // disallow new operators with the String, Number, and Boolean objects
    "no-octal": ["error"], // disallow octal literals
    "no-octal-escape": ["error"], // disallow octal escape sequences in string literals
    "no-param-reassign": ["error"], // disallow reassigning function parameters
    "no-proto": ["error"], // disallow the use of the __proto__ property
    "no-redeclare": ["error"], // disallow var redeclaration
    "no-return-assign": ["off"], // disallow assignment operators in return statements
    "no-script-url": ["error"], // disallow javascript: urls
    "no-self-assign": ["error"], // disallow assignments where both sides are exactly the same
    "no-self-compare": ["error"], // disallow comparisons where both sides are exactly the same
    "no-sequences": ["error"], // disallow comma operators
    "no-throw-literal": ["warn"], // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": ["warn"], // disallow unmodified loop conditions
    "no-unused-expressions": ["warn"], // disallow unused expressions
    "no-unused-labels": ["error"], // disallow unused labels
    "no-useless-call": ["warn"], // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": ["warn"], // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": ["warn"], // disallow unnecessary escape characters
    "no-void": ["error"], // disallow void operators
    "no-warning-comments": ["off"], // disallow specified warning terms in comments
    "no-with": ["error"], // disallow with statements
    "radix": ["warn"], // enforce the consistent use of the radix argument when using parseInt()
    "vars-on-top": ["error"], // require var declarations be placed at the top of their containing scope
    "wrap-iife": ["error", "any"], // require parentheses around immediate function invocations
    "yoda": ["warn"], // require or disallow “Yoda” conditions,

    /**
     * Strict Mode
     */
    "strict": ["error"],

    /**
     * Variables
     */
    "init-declarations": ["off", "never", { "ignoreForLoopInit": true }], // require or disallow initialization in var declarations
    "no-catch-shadow": ["warn"], // disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": ["error"], // disallow deleting variables
    "no-shadow":  ["error", { "hoist": "functions" }], // disallow var declarations from shadowing variables in the outer scope
    "no-shadow-restricted-names": ["error"], // disallow identifiers from shadowing restricted names
    "no-undef": ["error"], // disallow the use of undeclared variables unless mentioned in /* global */ comments
    "no-undef-init": ["error"], // disallow initializing variables to undefined
    "no-undefined": ["off"], // disallow the use of undefined as an identifier
    "no-unused-vars": ["warn"], // disallow unused variables
    "no-use-before-define": ["error"], // disallow the use of variables before they are defined

    /**
     * Node.js and CommonJS
     */
    "callback-return": ["warn"], // require return statements after callbacks
    "global-require": ["off"], // require require() calls to be placed at top-level module scope
    "handle-callback-err": ["error", "^(err|error|errors)$"], // require error handling in callbacks
    "no-mixed-requires": ["warn"], // disallow require calls to be mixed with regular var declarations
    "no-new-require": ["warn"], // disallow new operators with calls to require
    "no-path-concat": ["warn"], // disallow string concatenation with __dirname and __filename
    "no-process-env": ["warn"], // disallow the use of process.env
    "no-process-exit": ["warn"], // disallow the use of process.exit()
    "no-restricted-modules": ["error", "cluster"], // disallow specified modules when loaded by require

    /**
     * ECMAScript 6
     */
    "arrow-body-style": ["off", "as-needed"], // require braces around arrow function bodies
    "arrow-parens": ["off", "as-needed"], // require parentheses around arrow function arguments
    "arrow-spacing": ["error"], // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": ["error"], // require super() calls in constructors
    "generator-star-spacing": ["off"], // enforce consistent spacing around * operators in generator functions
    "no-class-assign": ["error"], // disallow reassigning class members
    "no-confusing-arrow": ["error"], // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": ["error"], // disallow reassigning const variables
    "no-dupe-class-members": ["error"], // disallow duplicate class members
    "no-duplicate-imports": ["error"], // disallow duplicate module imports
    "no-new-symbol": ["error"], // disallow new operators with the Symbol object
    "no-restricted-imports": ["error", "cluster"], // disallow specified modules when loaded by import
    "no-this-before-super": ["error"], // disallow this/super before calling super() in constructors
    "no-useless-computed-key": ["error"], // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": ["off"], // disallow unnecessary constructors
    "no-useless-rename": ["error"], // disallow renaming import, export, and destructured assignments to the same name
    "no-var": ["error"], // require let or const instead of var
    "object-shorthand": ["error"], // require or disallow method and property shorthand syntax for object literal
    "prefer-arrow-callback": ["error"], // require or disallow method and property shorthand syntax for object literals
    "prefer-const": ["error"], // require const declarations for variables that are never reassigned after declared
    "prefer-reflect": ["off"], // require Reflect methods where applicable
    "prefer-rest-params": ["warn"], // require rest parameters instead of arguments
    "prefer-spread": ["error"], // require spread operators instead of .apply()
    "prefer-template": ["error"], // require template literals instead of string concatenation
    "require-yield": ["error"], // require generator functions to contain
    "rest-spread-spacing": ["error"], // enforce spacing between rest and spread operators and their expressions
    "sort-imports": ["off", {
      "ignoreCase": false,
      "ignoreMemberSort": false,
      "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
    }], // enforce sorted import declarations within modules
    "template-curly-spacing": ["error", "never"], // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": ["error", {"before": true, "after": false}], // require or disallow spacing around the * in yield* expressions

    /**
     * Stylistic Issues
     */
    "array-bracket-spacing": ["error", "never"], // enforce consistent spacing inside array brackets
    "block-spacing": ["error"], // enforce consistent spacing inside single-line blocks
    "brace-style": ["off"], // enforce consistent brace style for blocks
    "camelcase": ["error", {"properties": "never"}], // enforce camelcase naming convention
    "comma-dangle": ["error", "never"], // require or disallow trailing commas
    "comma-spacing": ["error", { "before": false, "after": true }], // enforce consistent spacing before and after commas
    "comma-style": ["error", "last"], // enforce consistent comma style
    "computed-property-spacing": ["error", "never"], // enforce consistent spacing inside computed property brackets
    "consistent-this": ["error", "self"], // enforce consistent naming when capturing the current execution context
    "eol-last": ["error"], // enforce at least one newline at the end of files
    "func-names": ["error"], // require or disallow named function expressions
    "func-style": ["error", "declaration", { "allowArrowFunctions": true }], // enforce the consistent use of either function declarations or expressions
    "id-blacklist": ["off", "data", "err", "e", "cb", "callback"], // disallow specified identifiers
    "id-length": ["error"], // enforce minimum and maximum identifier lengths
    "id-match": ["off", "^[a-z]+([A-Z][a-z]+)*$"], // require identifiers to match a specified regular expression
    "indent": ["error", 2], // enforce consistent indentation
    "jsx-quotes": ["error", "prefer-double"], // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": ["error", { "beforeColon": false }], // enforce consistent spacing before and after keywords
    // "linebreak-style": ["error", "unix"], // enforce consistent linebreak style
    "lines-around-comment": ["off", { "beforeBlockComment": true }], // require empty lines around comments
    "max-depth": ["error", 4], // enforce a maximum depth that blocks can be nested
    "max-len": ["error", 80, { "ignoreUrls": true }], // enforce a maximum line length
    "max-lines": ["off"], // enforce a maximum file length
    "max-nested-callbacks": ["error", 3], // enforce a maximum depth that callbacks can be nested
    "max-params": ["error", 6], // enforce a maximum number of parameters in function definitions
    "max-statements": ["off", 10], // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": ["off", { "max": 1 }], // enforce a maximum number of statements allowed per line
    "new-cap": ["error"], // require constructor function names to begin with a capital letter
    "new-parens": ["error"], // require parentheses when invoking a constructor with no arguments
    "newline-after-var": ["off", "always"], // require or disallow an empty line after var declarations
    "newline-before-return": ["off"], // require an empty line before return statements
    "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 2 }], // require a newline after each call in a method chain
    "no-array-constructor": ["error"], // disallow Array constructors
    "no-bitwise": ["error"], // disallow bitwise operators
    "no-continue": ["error"], // disallow continue statements
    "no-inline-comments": ["off"], // disallow inline comments after code
    "no-lonely-if": ["error"], // disallow if statements as the only statement in else blocks
    "no-mixed-operators": [
      "error",
      {
        "groups": [
          ["+", "-", "*", "/", "%", "**"],
          ["&", "|", "^", "~", "<<", ">>", ">>>"],
          ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
          ["&&", "||"],
          ["in", "instanceof"]
        ],
        "allowSamePrecedence": true
      }
    ], // disallow mixes of different operators
    "no-mixed-spaces-and-tabs": ["error"], // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["error"], // disallow multiple empty lines
    "no-negated-condition": ["error"], // disallow negated conditions
    "no-nested-ternary": ["error"], // disallow nested ternary expressions
    "no-new-object": ["error"], // disallow Object constructors
    "no-plusplus": ["off"], // disallow the unary operators ++ and --
    "no-restricted-syntax": ["error"], // disallow spacing between function identifiers and their applications
    "no-ternary": ["off"], // disallow ternary operators
    "no-trailing-spaces": ["error"], // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": ["off"], // disallow dangling underscores in identifiers
    "no-unneeded-ternary": ["error"], // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": ["off"], // disallow whitespace before properties
    "object-curly-newline": ["off"], // enforce consistent line breaks inside braces
    "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
    "object-property-newline:": ["off"], // enforce placing object properties on separate lines
    "one-var": ["off", "always"], // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": ["error", "initializations"], // require or disallow newlines around var declarations
    "operator-assignment": ["error", "always"], // require or disallow assignment operator shorthand where possible
    "operator-linebreak": ["off", "before", { "overrides": { "?": "after" } }], // enforce consistent linebreak style for operators
    "padded-blocks": ["error", { "classes": "always" }], // require or disallow padding within blocks
    "quote-props": ["off", "as-needed"], // require quotes around object literal property names
    "quotes": ["off"], // enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": ["off", {
      "require": {
        "FunctionDeclaration": true,
        "MethodDefinition": false,
        "ClassDeclaration": false
      }
    }], // require JSDoc comments
    "semi": ["error", "always"], // require or disallow semicolons instead of ASI
    "semi-spacing": ["error", {"before": false, "after": true}], // enforce consistent spacing before and after semicolons
    "sort-vars": ["off", { "ignoreCase": true }], // require variables within the same declaration block to be sorted
    "space-before-blocks": ["error"], // enforce consistent spacing before blocks
    "space-before-function-paren": ["off"], // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": ["error", "never"], // enforce consistent spacing inside parentheses
    "space-infix-ops": ["error", {"int32Hint": false}], // require spacing around operators
    "space-unary-ops": [
      2, {
        "words": true,
        "nonwords": false,
        "overrides": {
          "new": false,
          "++": true
        }
      }], // enforce consistent spacing before or after unary operators
    "spaced-comment": ["error", "always"], // enforce consistent spacing after the // or /* in a comment
    "unicode-bom": ["error"], // require or disallow the Unicode BOM,
    "wrap-regex": ["warn"], // require parenthesis around regex literals

    /**
     * React Specific Rules
     * https://github.com/yannickcr/eslint-plugin-react
     */

    /**
     * Prevent missing displayName in a React component definition
     * DisplayName allows you to name your component. This name is used by React in debugging messages
     */
    "react/display-name": ["warn", { "ignoreTranspilerName": true }],
    "react/forbid-prop-types": ["off", { "forbid": ["string-of-disallowed-proptypes"] }], // Forbid certain propTypes
    "react/no-danger": ["off"], // Prevent usage of dangerous JSX properties
    "react/no-did-mount-set-state": ["error"],// Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": ["warn"], // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": ["error"], // Prevent direct mutation of this.state
    "react/no-is-mounted": ["error"], // Prevent usage of isMounted
    "react/no-multi-comp": ["error", { "ignoreStateless": true}], // Prevent multiple component definition per file
    "react/no-render-return-value": ["error"], // Prevent usage of the return value of React.render
    "react/no-set-state": ["off"], // Prevent usage of setState
    "react/no-string-refs": ["warn"], // Prevent using string references in ref attribute
    "react/no-unknown-property": ["error"], // Prevent usage of unknown DOM property
    "react/prefer-es6-class": ["error", "always"], // Enforce ES5 or ES6 class for React Components
    "react/prefer-stateless-function": ["off"], // Enforce stateless React Components to be written as a pure function
    "react/prop-types": ["off"], // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": ["warn"], // Prevent missing React when using JSX
    "react/require-optimization": ["warn"], // Enforce React components to have a shouldComponentUpdate method
    "react/require-render-return": ["warn"], // Enforce ES5 or ES6 class for returning value in render function
    "react/self-closing-comp": ["error", {
      "component": true,
      "html": true
    }], // Prevent extra closing tags for components without children
    "react/sort-comp": ["error"], //  Enforce component methods order
    "react/sort-prop-types": ["off"], // Enforce propTypes declarations alphabetical sorting

    /**
     * JSX Rules
     */
    "react/jsx-boolean-value": ["error", "always"], // Enforce boolean attributes notation in JSX
    "react/jsx-closing-bracket-location": ["error"], // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": ["warn", "never"], // Enforce or disallow spaces inside of curly braces in JSX attributes
    "react/jsx-equals-spacing": ["error", "never"], // Enforce or disallow spaces around equal signs in JSX attributes.
    "react/jsx-filename-extension": ["error", { "extensions": [".jsx", ".js"] }], // Restrict file extensions that may contain JSX
    "react/jsx-first-prop-new-line": ["off"], // Configure the position of the first property
    "react/jsx-handler-names": ["off", {
      "eventHandlerPrefix": "on",
      "eventHandlerPropPrefix": "handle"
    }], // Enforce event handler naming conventions in JSX
    "react/jsx-indent": ["error", 2], // JSX indentation
    "react/jsx-indent-props": ["off", 2], // Validate props indentation in JSX
    "react/jsx-key": ["off"], // Detect missing key prop
    "react/jsx-max-props-per-line": ["error", {"maximum": 5}], // Limit maximum of props on a single line in JSX
    "react/jsx-no-bind": ["warn"], // No .bind() or Arrow Functions in JSX Props
    "react/jsx-no-duplicate-props": ["error"], // Prevent duplicate properties in JSX
    "react/jsx-no-literals": ["off"], // Prevent usage of unwrapped JSX strings
    "react/jsx-no-target-blank": ["warn"], // Prevent usage of unsafe target='_blank'
    "react/jsx-no-undef": ["warn"], // Disallow undeclared variables in JSX
    "react/jsx-pascal-case": ["warn"], // Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-props": ["off"], // Enforce props alphabetical sorting
    "react/jsx-space-before-closing": ["error"], // Validate spacing before closing bracket in JSX
    "react/jsx-uses-react": ["warn"], // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": ["warn"], // Prevent variables used in JSX to be incorrectly marked as unused
    "react/jsx-wrap-multilines": ["error"] // Prevent missing parentheses around multiline JSX
  }

}